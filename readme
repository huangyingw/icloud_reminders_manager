# iCloud 提醒转化为日历应用设计文档

## **目标**

开发一个命令行应用程序，用于管理 iCloud 提醒和日历，包括：

1. 将提醒转化为日历事件。
2. 删除已转化的提醒。
3. 将已过期的事件自动移动到当前这一周的同一天同一时间，同时保留其所有属性。
4. 删除已过期的循环事件。
5. 合并相同或相似的日历事件。

应用仅操作 iCloud 提醒和日历，确保日历事件的所有属性（如提醒设置）在操作过程中不被修改。

---

## **功能需求**

此部分详细描述应用的核心功能，同时优化顺序和逻辑，确保清晰易懂。

### **1. 提醒转化为日历事件**

这一功能处理提醒到日历事件的转换，确保完整性和一致性。

- 获取 iCloud 中的所有未完成提醒。
- 将未完成的提醒转化为日历事件，同时保留所有属性：
  - 标题
  - 备注/描述
  - 截止日期和时间
  - 提醒/通知
- 转化成功后删除对应的未完成提醒。

### **2. 处理过期事件**

- 非循环事件：
  - 检测结束时间早于当前日期的事件。
  - 将这些事件移动到当前一周的同一天和同一时间，同时保留所有原始属性。同一天和同一时间可以有多个事件，无需避免冲突。
- 循环事件：
  - 删除已过期的循环事件。如果事件仍有未来的重复实例，仅删除已经过期的部分，并保留未来的重复事件，以保持日历整洁。

- **单元测试**：
  - 测试删除已过期的循环事件，同时验证未来的重复实例是否被正确保留。
  - 验证在事件重复频率高（如每天）的情况下，仅移除正确的过期事件部分。

### **3. 检测并合并重复事件**

处理重复事件的检测和合并，涵盖边界情况和详细规则。

- 检测规则：

  - 标题相同或相似（例如，使用 Levenshtein 距离算法进行模糊匹配）。
  - 以下边界情况需要处理：
    1. **标题完全相同但备注内容不同**：
       - 在合并时合并备注内容，避免丢失任何信息。
    2. **事件时间高度接近但不完全相同**：
       - 如果标题不接近（例如通过 Levenshtein 距离判断），即使时间相同，也视为不同事件，不进行合并。时间接近的定义为：相差在 30 分钟以内。这一阈值是为了平衡重复检测的敏感性和实用性，可以根据实际需求进行配置。 如果标题不接近（例如通过 Levenshtein 距离判断），即使时间相同，也视为不同事件，不进行合并。
    3. **事件提醒设置不同**：
       - 合并后保留所有提醒设置，确保所有通知都被触发。
    4. **事件参与者列表不同**：
       - 合并时将所有参与者合并到一个事件中，避免遗漏。
    5. **事件标题相同但位置或 URL 不同**：
       - 如果事件的 URL 存在冲突（如多个不同链接），应将所有链接合并保留在备注中，确保没有遗漏任何 URL 信息。
    6. **仅部分属性缺失的重复事件**：
       - 将所有事件的属性合并起来，确保每个事件的所有信息都保留下来，避免覆盖已有数据或遗漏任何重要信息。

- 保留检测到的重复事件中最早的一个。然后，将其移动到当前周的同一天和同一时间，同时保留所有原始属性。不处理循环事件，因为它们本身就是完全相同的。

- **单元测试**：

  - 针对每种边界情况编写单元测试，验证以下逻辑。
    - 当 URL 或提醒时间冲突时，测试优先保留哪个链接或时间规则。
    - 验证对重叠时间和冲突 URL 的处理是否一致。
    - 标题完全相同但备注合并是否正确。
    - 时间接近但是否准确区分。
    - 不同提醒设置是否都保留。
    - 参与者和 URL 合并是否完整。

- 检测规则：

  - 标题相同或相似（例如，使用 Levenshtein 距离算法进行模糊匹配）。

- 将检测到的重复事件保留最早的事件，并将其移动到当前周的同一天和同一时间，同时保留所有原始属性。对于循环事件，不做任何处理，因为它们本身就是完全相同的。

### **4. 数据完整性**

- 确保在转化、合并和移动过程中，事件的所有属性（如提醒、参与者、URL）保持不变。
- 仅操作 iCloud 提醒和日历。

---

## **技术需求**

### **1. 编程语言**

- **Swift** 是推荐语言，原因：
  - 与 macOS 和 iCloud API 无缝集成。
  - 原生支持 EventKit 和 Reminders 框架。
  - 强类型和编译时检查，确保代码安全性和稳定性。

### **2. API 集成**

支持完整的 CRUD 操作。例如，可以通过读取操作获取所有提醒，通过创建操作添加新的日历事件，更新操作修改现有事件的时间或备注，删除操作清理不再需要的提醒。

-

- 访问提醒和日历数据。

- 读取提醒并转化为日历事件。

- 创建、更新、删除事件。

- 访问 iCloud 提醒。

  - 读取、创建、更新和删除日历事件。

### **3. 命令行开发**

- 构建命令行工具以：
  - 简化操作流程，无需图形界面。
  - 支持自动化运行（例如通过 `cron` 定时任务）。

### **4. 性能与扩展性**

- 优化处理大量数据的能力（如数百条提醒或日历事件）。
- 高效完成重复检测和属性保留等操作。

---

## **测试与验证**

### **1. 单元测试**

-

- 独立测试各模块：

- 提醒转化为日历的功能，确保提醒转化后所有属性完整保留。

- 重复检测与合并逻辑，验证各种边界情况处理是否正确。

- 重复检测与合并逻辑。

- 过期事件处理。

- 边界情况处理：

  - 处理大量提醒或事件。
  - 应对属性重叠或模糊的事件。
  - 处理格式不完整或错误的数据。

- 独立测试各模块：

  - 提醒转化为日历的功能。
  - 重复检测与合并逻辑。
  - 过期事件处理。

### **2. 集成测试**

- 验证端到端的完整功能：

  - 确保提醒被正确转化并删除。
  - 确认重复事件合并准确。
  - 验证过期事件的处理符合预期。

- 处理大量提醒或事件。

- 应对属性重叠或模糊的事件。

- 处理格式不完整或错误的数据。

---

## **实施计划**

### **1. 开发阶段**

- **第一阶段**：实现基本的提醒转化为日历功能。
- **第二阶段**：实现过期事件处理。
- **第三阶段**：添加重复检测与合并功能。
- **第四阶段**：优化性能并增加错误处理。
- **第五阶段**：全面测试与部署。

### **2. 工具与环境**

- **开发**：使用 Swift 开发命令行工具。

---

## **未来扩展**

- 增加对其他日历服务（如 Google Calendar）的支持，使用 CalDAV 协议。
- 提供配置文件，支持自定义功能行为（例如重复检测阈值）。

